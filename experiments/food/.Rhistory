summarize(Rating.m = mean(Rating, na.rm = T), Rating.se = se(Rating))
ggplot(followup.data, aes(x = TimePoint.named, y = Rating.m)) +
geom_point() +
geom_errorbar(aes(ymin = Rating.m - Rating.se, ymax = Rating.m + Rating.se), width = .2) +
facet_wrap(~Question.named) +
theme_om() +
theme(legend.position = 'right')
ggplot(boot.df.ap, aes(x = Bootstrap.Estimates)) +
geom_histogram() +
geom_vline(xintercept = boot.conf.ap$bca[4], linetype = 'dashed') +
geom_vline(xintercept = boot.conf.ap$bca[5], linetype = 'dashed') +
geom_vline(xintercept = boot.mean.ap, linetype = 'dashed', color = 'red') +
geom_text(aes(x = boot.conf.ap$bca[4], y = -4, label = round(boot.conf.ap$bca[4], 3))) +
geom_text(aes(x = boot.conf.ap$bca[5], y = -4, label = round(boot.conf.ap$bca[5], 3))) +
geom_text(aes(x = boot.mean.ap, y = -4, label = round(boot.mean.ap, 3))) +
xlab('Bootstrap Estimates for Affective Polarization') +
theme_om()
followup.data = question.data %>%
filter(TimePoint.named %in% c('Pre', 'Post', 'FollowUp'), Condition == 'Delay') %>%
group_by(Question.named, TimePoint.named) %>%
summarize(Rating.m = mean(Rating, na.rm = T), Rating.se = se(Rating))
ggplot(followup.data, aes(x = TimePoint.named, y = Rating.m)) +
geom_point() +
geom_errorbar(aes(ymin = Rating.m - Rating.se, ymax = Rating.m + Rating.se), width = .2) +
facet_wrap(~Question.named) +
theme_om() +
theme(legend.position = 'right')
followup.data = question.data %>%
filter(TimePoint.named %in% c('Pre', 'Post', 'FollowUp')) %>%
group_by(Question.named, Condition, TimePoint.named) %>%
summarize(Rating.m = mean(Rating, na.rm = T), Rating.se = se(Rating))
ggplot(followup.data, aes(x = TimePoint.named, y = Rating.m, color = Condition)) +
geom_point() +
geom_errorbar(aes(ymin = Rating.m - Rating.se, ymax = Rating.m + Rating.se), width = .2) +
facet_wrap(~Question.named) +
theme_om() +
theme(legend.position = 'right')
rcs = c(4.7122,       8.4266,       12.732,       18.778,       27.449,       37.754)
cs = c(67.124,       83.346,       94.945,       100.91,       105.95,        109.6)
mb = 113.97
mf = 52.778
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('2', '5', '10', '20', '40', '80'), levels = c('2', '5', '10', '20', '40', '80')))
df$type = factor(df$type, c('Non-adaptive sampling', 'Adaptive sampling'))
ggplot(data = df, aes(x = k, y = output, group = type, fill = type)) +
geom_col(position = 'dodge') +
xlab('Set size') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "Maximum EV", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df, aes(x = k, y = output, group = type, fill = type)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(# of actions evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "Maximum EV", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output, group = type, fill = type)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(# of actions evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "Maximum EV", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(# of actions evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "Maximum EV", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "100% ", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 3, y = mb - 5, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb - 5, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.5, y = mb - 5, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.75, y = mb - 5, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.5, y = mb - 5, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.5, y = mb - 6, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.3, y = mb - 6, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 6, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 6, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 7, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 20, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 20, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb + 2, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 3, y = mb + 2, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2.3, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6)
2 / 1000
c(2,5,10,20,40,80) / 1000
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('.2%', '..5%', '1%', '2%', '4%', '8%'), c('.2%', '..5%', '1%', '2%', '4%', '8%')))
rcs = c(4.7122,       8.4266,       12.732,       18.778,       27.449,       37.754)
cs = c(67.124,       83.346,       94.945,       100.91,       105.95,        109.6)
mb = 113.97
mf = 52.778
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('.2%', '..5%', '1%', '2%', '4%', '8%'), c('.2%', '..5%', '1%', '2%', '4%', '8%')))
df$type = factor(df$type, c('Non-adaptive sampling', 'Adaptive sampling'))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6)
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
#geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
rcs = c(4.7122,       8.4266,       12.732,       18.778,       27.449,       37.754)
cs = c(67.124,       83.346,       94.945,       100.91,       105.95,        109.6)
mb = 113.97
mf = 52.778
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('.2%', '.5%', '1%', '2%', '4%', '8%'), c('.2%', '.5%', '1%', '2%', '4%', '8%')))
df$type = factor(df$type, c('Non-adaptive sampling', 'Adaptive sampling'))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6)
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
#geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
load("~/Me/Psychology/Projects/choicesets/git/data/choice-set/months_confounded/real1/analysis.rdata")
df.logit
# for selection tests, we need logit
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo.filt)) {
subj.name = df.demo$subject[subj]
recalled.temp = df.words.filt$in.cs[df.words.filt$subject == subj.name]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words.filt %>% filter(subject == subj.name)
df.s2.temp = df.s2.filt %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
Condition.col = rep(df.s2.temp$cond, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$s1_value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$high_s1value[recalled.temp], nAnswered)
MBval.col = rep(df.words.temp$s2_value[recalled.temp], nAnswered)
MBhigh.col = rep(df.words.temp$high_s2value[recalled.temp], nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
ind = ind + 1
}
}
Choice.col = as.vector(t(temp.choice))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col))
}
}
df.logit = df.logit %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
View(df.logit)
rm(list=ls())
library(mlogit)
library(nnet)
library(ggstatsplot)
methods(nobs)
# setup -------------------------------------------------------------------
require(dplyr)
require(ggplot2)
require(ggExtra)
require(lme4)
require(lmerTest)
require(mlogit)
require(lattice)
require(stringdist)
require(ggstatsplot)
require(plotly)
require(rsm)
require(rje)
require(tidyr)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=30, colour = "black"),
axis.title=element_text(size=18, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 20),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
# Only works in RStudio -- otherwise you have to set the path manually
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
se = function(x) {return(sd(x, na.rm = T) / sqrt(length(x)))}
dodge <- position_dodge(width=0.9)
betterLine = function(data, formula, color = '#105db0') {
lg = summary(lm(formula, data))$coefficients
return(c(geom_abline(intercept = lg[1,1], slope = lg[2,1], color = color, size = 1.25),
geom_abline(intercept = lg[1,1] - lg[1,2], slope = lg[2,1], color = color, linetype = 'dashed', size = 1, alpha = .8),
geom_abline(intercept = lg[1,1] + lg[1,2], slope = lg[2,1], color = color, linetype = 'dashed', size = 1, alpha = .8)))
}
# choose which experiment -------------------------------------------------
expt = readline(prompt="Which dinner experiment do you want to analyze? (Enter 1 or 2): ")
# import data -------------------------------------------------------------
df = read.csv(paste0(expt, '/data.csv'), stringsAsFactors = F) %>% filter(DistributionChannel != 'preview', Status == 0) %>%
dplyr::select(ResponseId, choice_30, choicetime_30_Page.Submit,
cs_1, cs_3, cs_4, cs_5, cs_6, cs_7, cs_8, cs_13,
cs_time_Page.Submit,
val_q_1, val_q_2, val_q_3, val_q_4, val_q_5, val_q_6, val_q_7, val_q_8, val_q_9,
val_time_Page.Submit,
val_other_q_1, val_other_q_2, val_other_q_3, val_other_q_4, val_other_q_5, val_other_q_6, val_other_q_7, val_other_q_8, val_other_q_9,
Q159_Page.Submit)
df2 = data.frame(subject = character(), food = character(), chosen = logical(), val = numeric(), val.spec = numeric(), choice = character())
cs.names = c('cs_1', 'cs_3', 'cs_4', 'cs_5', 'cs_6', 'cs_7', 'cs_8', 'cs_13')
val.names = c('val_q_1', 'val_q_2', 'val_q_3', 'val_q_4', 'val_q_5', 'val_q_6', 'val_q_7', 'val_q_8', 'val_q_9')
val.spec.names = c('val_other_q_1', 'val_other_q_2', 'val_other_q_3', 'val_other_q_4', 'val_other_q_5', 'val_other_q_6', 'val_other_q_7', 'val_other_q_8', 'val_other_q_9')
for (i in 1:nrow(df)) {
subj = df$ResponseId[i]
choice = as.character(df$choice_30[i])
all.foods = as.character(df[i, cs.names])
choice.ind = 1
val = as.numeric(as.character(df[i, val.names[1]]))
val.spec = as.numeric(as.character(df[i, val.spec.names[1]]))
df2 = rbind(df2, data.frame(subject = subj, food = choice, chosen = 1, val = val, val.spec = val.spec, choice = choice))
for (j in 1:length(cs.names)) {
food = as.character(df[i, cs.names[j]])
if (nchar(food) > 0) {
val = as.numeric(as.character(df[i, val.names[j+1]]))
val.spec = as.numeric(as.character(df[i, val.spec.names[j+1]]))
chosen = 0
df2 = rbind(df2, data.frame(subject = subj, food = food, chosen = chosen, val = val, val.spec = val.spec, choice = choice))
}
}
}
df2 = df2 %>% mutate(val.diff = val - val.spec)
df.subj = df2 %>% group_by(subject) %>%
summarize(cs.size = n(), nas = any(is.na(val) | is.na(val.spec)),
var.choice = sd(c(val, val.spec)), val.diff = mean(val.diff),
val = mean(val), val.spec = mean(val.spec))
df2.filt = df2 %>% filter(!(subject %in% df.subj$subject[df.subj$nas == T | df.subj$var.choice == 0]))
df2.subj.filt = df.subj %>% filter(!nas & var.choice != 0)
p = ggplot(data = df2.filt %>% mutate(chosen = ifelse(chosen == T, T, NA)), aes(x = val, y = val.spec, color = chosen, group = chosen)) +
geom_jitter(size = 2) +
geom_vline(xintercept = 4) +
geom_hline(yintercept = 4) +
labs(x = '', y = '') +
guides(color = F)
ggMarginal(p, type='histogram', xparams = list(bins=8), yparams = list(bins = 8))
View(df2.filt)
length(unique(df2.filt$subject))
subj = 1
subj.name = df2.filt$subject[subj]
df2.temp = df2.filt %>% filter(subject == subj.name)
df2.temp
df.figure = df.figure %>%
mutate(chosen.fac = factor(chosen, c(0,1), c('Considered', 'Chosen')),
type.fac = factor(type, c(0,1), c('MF', 'MB'))) %>%
select(-c(chosen, type))
subj = 1
subj.name = df2.filt$subject[subj]
df2.temp = df2.filt %>% filter(subject == subj.name)
cs.size = nrow(df2.temp)
mf = mean(df2.temp$val == i)
mb = mean(df2.temp$val.spec == i)
i = 1
mf = mean(df2.temp$val == i)
mb = mean(df2.temp$val.spec == i)
mf
mb
df.figure %>% spread(chosen.fac, prob)
