teacher.graph.wide = teacher.graph %>% select(-Rating.se) %>% spread(Condition, Rating.m)
teacher.graph.wide.se = teacher.graph %>% select(-Rating.m) %>% spread(Condition, Rating.se)
teacher.graph.wide$Delay.se = teacher.graph.wide.se$Delay
teacher.graph.wide$Standard.se = teacher.graph.wide.se$Standard
ggplot(teacher.graph.wide, aes(x = Delay, y = Standard, color = AdminLastName)) +
geom_point(size=2) +
geom_errorbar(aes(ymin = Standard - Standard.se, ymax = Standard + Standard.se), width = .1) +
geom_errorbarh(aes(xmin = Delay - Delay.se, xmax = Delay + Delay.se), height = .1) +
facet_wrap(~Question.named) +
theme_om() +
theme(legend.position = 'right') +
xlim(0,1) + ylim(0,1)
teacher.graph = difference.data %>%
group_by(AdminLastName, Condition, Question.named) %>%
summarize(Diff.m = mean(Diff, na.rm = T), Diff.se = se(Diff))
# Make wide version... inelegant right now, but it works
# (It's cause frigging Hadley Wickham won't let spread do multiple value columns... :))
teacher.graph.wide = teacher.graph %>% select(-Diff.se) %>% spread(Condition, Diff.m)
teacher.graph.wide.se = teacher.graph %>% select(-Diff.m) %>% spread(Condition, Diff.se)
teacher.graph.wide$Delay.se = teacher.graph.wide.se$Delay
teacher.graph.wide$Standard.se = teacher.graph.wide.se$Standard
ggplot(teacher.graph.wide, aes(x = Delay, y = Standard, color = AdminLastName)) +
geom_point(size=2) +
geom_abline(intercept=0,slope=1) +
geom_errorbar(aes(ymin = Standard - Standard.se, ymax = Standard + Standard.se), width = .1) +
geom_errorbarh(aes(xmin = Delay - Delay.se, xmax = Delay + Delay.se), height = .1) +
facet_wrap(~Question.named) +
theme_om() +
theme(legend.position = 'right') +
xlim(-.3,.3) + ylim(-.3,.3)
ggplot(boot.df, aes(x = Bootstrap.Estimates)) +
geom_histogram() +
geom_vline(xintercept = boot.conf$bca[4], linetype = 'dashed') +
geom_vline(xintercept = boot.conf$bca[5], linetype = 'dashed') +
geom_vline(xintercept = boot.mean, linetype = 'dashed', color = 'red') +
geom_text(aes(x = boot.conf$bca[4], y = -4, label = round(boot.conf$bca[4], 3))) +
geom_text(aes(x = boot.conf$bca[5], y = -4, label = round(boot.conf$bca[5], 3))) +
geom_text(aes(x = boot.mean, y = -4, label = round(boot.mean, 3))) +
xlab('Bootstrap Estimates for Outgroup Liking') +
theme_om()
followup.data = question.data %>%
filter(TimePoint.named %in% c('Pre', 'Post', 'FollowUp'), Condition == 'Standard') %>%
group_by(Question.named, TimePoint.named) %>%
summarize(Rating.m = mean(Rating, na.rm = T), Rating.se = se(Rating))
ggplot(followup.data, aes(x = TimePoint.named, y = Rating.m)) +
geom_point() +
geom_errorbar(aes(ymin = Rating.m - Rating.se, ymax = Rating.m + Rating.se), width = .2) +
facet_wrap(~Question.named) +
theme_om() +
theme(legend.position = 'right')
ggplot(boot.df.ap, aes(x = Bootstrap.Estimates)) +
geom_histogram() +
geom_vline(xintercept = boot.conf.ap$bca[4], linetype = 'dashed') +
geom_vline(xintercept = boot.conf.ap$bca[5], linetype = 'dashed') +
geom_vline(xintercept = boot.mean.ap, linetype = 'dashed', color = 'red') +
geom_text(aes(x = boot.conf.ap$bca[4], y = -4, label = round(boot.conf.ap$bca[4], 3))) +
geom_text(aes(x = boot.conf.ap$bca[5], y = -4, label = round(boot.conf.ap$bca[5], 3))) +
geom_text(aes(x = boot.mean.ap, y = -4, label = round(boot.mean.ap, 3))) +
xlab('Bootstrap Estimates for Affective Polarization') +
theme_om()
followup.data = question.data %>%
filter(TimePoint.named %in% c('Pre', 'Post', 'FollowUp'), Condition == 'Delay') %>%
group_by(Question.named, TimePoint.named) %>%
summarize(Rating.m = mean(Rating, na.rm = T), Rating.se = se(Rating))
ggplot(followup.data, aes(x = TimePoint.named, y = Rating.m)) +
geom_point() +
geom_errorbar(aes(ymin = Rating.m - Rating.se, ymax = Rating.m + Rating.se), width = .2) +
facet_wrap(~Question.named) +
theme_om() +
theme(legend.position = 'right')
followup.data = question.data %>%
filter(TimePoint.named %in% c('Pre', 'Post', 'FollowUp')) %>%
group_by(Question.named, Condition, TimePoint.named) %>%
summarize(Rating.m = mean(Rating, na.rm = T), Rating.se = se(Rating))
ggplot(followup.data, aes(x = TimePoint.named, y = Rating.m, color = Condition)) +
geom_point() +
geom_errorbar(aes(ymin = Rating.m - Rating.se, ymax = Rating.m + Rating.se), width = .2) +
facet_wrap(~Question.named) +
theme_om() +
theme(legend.position = 'right')
rcs = c(4.7122,       8.4266,       12.732,       18.778,       27.449,       37.754)
cs = c(67.124,       83.346,       94.945,       100.91,       105.95,        109.6)
mb = 113.97
mf = 52.778
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('2', '5', '10', '20', '40', '80'), levels = c('2', '5', '10', '20', '40', '80')))
df$type = factor(df$type, c('Non-adaptive sampling', 'Adaptive sampling'))
ggplot(data = df, aes(x = k, y = output, group = type, fill = type)) +
geom_col(position = 'dodge') +
xlab('Set size') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "Maximum EV", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df, aes(x = k, y = output, group = type, fill = type)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(# of actions evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "Maximum EV", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output, group = type, fill = type)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(# of actions evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "Maximum EV", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(# of actions evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "Maximum EV", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "100% ", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1, y = mb - 5, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
annotate("text", x = 1, y = mf + 23, label = "Maximum CV", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 3, y = mb - 5, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb - 5, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.5, y = mb - 5, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.75, y = mb - 5, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.5, y = mb - 5, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.5, y = mb - 6, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.3, y = mb - 6, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 6, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 6, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 7, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 20, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 20, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb + 2, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 3, y = mb + 2, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2.3, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6)
2 / 1000
c(2,5,10,20,40,80) / 1000
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('.2%', '..5%', '1%', '2%', '4%', '8%'), c('.2%', '..5%', '1%', '2%', '4%', '8%')))
rcs = c(4.7122,       8.4266,       12.732,       18.778,       27.449,       37.754)
cs = c(67.124,       83.346,       94.945,       100.91,       105.95,        109.6)
mb = 113.97
mf = 52.778
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('.2%', '..5%', '1%', '2%', '4%', '8%'), c('.2%', '..5%', '1%', '2%', '4%', '8%')))
df$type = factor(df$type, c('Non-adaptive sampling', 'Adaptive sampling'))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6)
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
#geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
rcs = c(4.7122,       8.4266,       12.732,       18.778,       27.449,       37.754)
cs = c(67.124,       83.346,       94.945,       100.91,       105.95,        109.6)
mb = 113.97
mf = 52.778
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('.2%', '.5%', '1%', '2%', '4%', '8%'), c('.2%', '.5%', '1%', '2%', '4%', '8%')))
df$type = factor(df$type, c('Non-adaptive sampling', 'Adaptive sampling'))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6)
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
#geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
load("~/Me/Psychology/Projects/choicesets/git/data/choice-set/months_confounded/real1/analysis.rdata")
df.logit
# for selection tests, we need logit
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo.filt)) {
subj.name = df.demo$subject[subj]
recalled.temp = df.words.filt$in.cs[df.words.filt$subject == subj.name]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words.filt %>% filter(subject == subj.name)
df.s2.temp = df.s2.filt %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
Condition.col = rep(df.s2.temp$cond, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$s1_value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$high_s1value[recalled.temp], nAnswered)
MBval.col = rep(df.words.temp$s2_value[recalled.temp], nAnswered)
MBhigh.col = rep(df.words.temp$high_s2value[recalled.temp], nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
ind = ind + 1
}
}
Choice.col = as.vector(t(temp.choice))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col))
}
}
df.logit = df.logit %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
View(df.logit)
rm(list=ls())
library(mlogit)
library(nnet)
library(ggstatsplot)
methods(nobs)
load("/Users/adam/Me/Psychology/Projects/choicesets/git/data/choice-set/months_confounded_loss/real1/analysis.rdata")
summary(m.cs.s1)
load("~/Me/Psychology/Projects/choicesets/git2/experiments/food/1/analysis.RData")
## raw data
p = ggplot(data = df2.filt %>% mutate(chosen = ifelse(chosen == T, T, NA)), aes(x = val, y = val.spec, color = chosen, group = chosen)) +
geom_jitter(size = 2) +
geom_vline(xintercept = 4) +
geom_hline(yintercept = 4) +
labs(x = '', y = '') +
guides(color = F)
require(dplyr)
require(ggplot2)
require(ggExtra)
require(tidyr)
require(lme4)
require(lmerTest)
require(mlogit)
require(rje)
## raw data
p = ggplot(data = df2.filt %>% mutate(chosen = ifelse(chosen == T, T, NA)), aes(x = val, y = val.spec, color = chosen, group = chosen)) +
geom_jitter(size = 2) +
geom_vline(xintercept = 4) +
geom_hline(yintercept = 4) +
labs(x = '', y = '') +
guides(color = F)
ggMarginal(p, type='histogram', xparams = list(bins=8), yparams = list(bins = 8))
mean(df2.filt$val > 4)
mean(df2.filt$val >= 4)
mean(df2.filt$val < 4)
mean(df2.filt$val.spec > 4)
mean(df2.filt$val.spec < 4)
mean(df2.filt$val[df2.filt$choice] < 4)
View(df2.filt)
mean(df2.filt$val[df2.filt$chosen] < 4)
mean(df2.filt$val[df2.filt$chosen == 1] < 4)
mean(df2.filt$val[df2.filt$chosen == 1] > 4)
mean(df2.filt$val.spec[df2.filt$chosen == 1] > 4)
mean(df2.filt$val.spec[df2.filt$chosen == 1] < 4)
setwd("~/Me/Psychology/Projects/choicesets/git2/experiments/months/7")
require(dplyr)
require(digest)
name = 'demo'
df = read.csv(paste0(name, '.csv'))
df.out = df
df.out$subject = sapply(as.character(df$subject), digest)
write.csv(df.out, paste0(name, '.csv'), row.names = F)
require(dplyr)
require(digest)
name = 'words'
df = read.csv(paste0(name, '.csv'))
df.out = df
df.out$subject = sapply(as.character(df$subject), digest)
write.csv(df.out, paste0(name, '.csv'), row.names = F)
require(dplyr)
require(digest)
name = 's1'
df = read.csv(paste0(name, '.csv'))
df.out = df
df.out$subject = sapply(as.character(df$subject), digest)
write.csv(df.out, paste0(name, '.csv'), row.names = F)
require(dplyr)
require(digest)
name = 's2'
df = read.csv(paste0(name, '.csv'))
df.out = df
df.out$subject = sapply(as.character(df$subject), digest)
write.csv(df.out, paste0(name, '.csv'), row.names = F)
